/**
 * Ê±ÇËÅå‰ø°ÁîüÊàêË¥®ÈáèÊµãËØïËÑöÊú¨
 * ÊµãËØï API: POST /api/resume/cover-letter
 * ÂäüËÉΩ: ÁîüÊàê‰∏™ÊÄßÂåñÊ±ÇËÅå‰ø°
 */

const axios = require('axios');

// ÊµãËØïÈÖçÁΩÆ
const CONFIG = {
    baseURL: 'http://localhost:5000/api',
    timeout: 30000,
    headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer YOUR_TEST_TOKEN' // ÈúÄË¶ÅÊõøÊç¢‰∏∫ÊúâÊïàÁöÑÊµãËØï token
    }
};

// ÊµãËØïÁî®‰æãÊï∞ÊçÆ
const TEST_CASES = [
    {
        name: "Ê†áÂáÜÊ±ÇËÅå‰ø°ÊµãËØï",
        input: {
            resumeText: `
Âº†‰∏â
È´òÁ∫ßËΩØ‰ª∂Â∑•Á®ãÂ∏à
ÁîµËØù: 138-0000-0000 | ÈÇÆÁÆ±: zhangsan@email.com

Â∑•‰ΩúÁªèÈ™å:
ABCÁßëÊäÄÊúâÈôêÂÖ¨Âè∏ (2020-Ëá≥‰ªä)
- Ë¥üË¥£Â§ßËßÑÊ®°ÂàÜÂ∏ÉÂºèÁ≥ªÁªüÁöÑËÆæËÆ°ÂíåÂºÄÂèë
- ‰ΩøÁî®Java„ÄÅSpring Boot„ÄÅÂæÆÊúçÂä°Êû∂ÊûÑ
- ‰ºòÂåñÁ≥ªÁªüÊÄßËÉΩÔºåÊèêÂçáÂêûÂêêÈáè50%
- Â∏¶È¢Ü5‰∫∫Âõ¢ÈòüÂÆåÊàêÊ†∏ÂøÉÂäüËÉΩÂºÄÂèë
- Êúâ‰∏∞ÂØåÁöÑÊï∞ÊçÆÂ∫ìËÆæËÆ°Âíå‰ºòÂåñÁªèÈ™å

ÊäÄËÉΩ:
ÁºñÁ®ãËØ≠Ë®Ä: Java, Python, JavaScript
Ê°ÜÊû∂: Spring Boot, Spring Cloud, React
Êï∞ÊçÆÂ∫ì: MySQL, Redis, MongoDB
‰∫ëÊúçÂä°: AWS, Docker, Kubernetes
            `,
            jobDescription: `
ÊãõËÅòÈ´òÁ∫ßËΩØ‰ª∂Â∑•Á®ãÂ∏à

Êàë‰ª¨ÊòØ‰∏ÄÂÆ∂Âø´ÈÄüÂèëÂ±ïÁöÑÁßëÊäÄÂÖ¨Âè∏ÔºåÊ≠£Âú®ÂØªÊâæÊúâÁªèÈ™åÁöÑËΩØ‰ª∂Â∑•Á®ãÂ∏àÂä†ÂÖ•Êàë‰ª¨ÁöÑÂõ¢Èòü„ÄÇ

Ë¶ÅÊ±Ç:
- 5Âπ¥‰ª•‰∏äJavaÂºÄÂèëÁªèÈ™å
- ÁÜüÊÇâSpring BootÂíåÂæÆÊúçÂä°Êû∂ÊûÑ
- ÊúâÂàÜÂ∏ÉÂºèÁ≥ªÁªüËÆæËÆ°ÁªèÈ™å
- ÊúâÂõ¢ÈòüÈ¢ÜÂØºÁªèÈ™å
- ÁÜüÊÇâMySQLÂíåRedis
- ÊúâÊÄßËÉΩ‰ºòÂåñÁªèÈ™å

‰ºòÂÖàËÄÉËôë:
- Êúâ‰∫ëÊúçÂä°ÁªèÈ™å(AWS/Azure/GCP)
- ÁÜüÊÇâDockerÂíåKubernetes
- ÊúâÂ§ßËßÑÊ®°Á≥ªÁªüÁªèÈ™å

Êàë‰ª¨Êèê‰æõ:
- ÊúâÁ´û‰∫âÂäõÁöÑËñ™ËµÑ
- ÁÅµÊ¥ªÁöÑÂ∑•‰ΩúÊó∂Èó¥
- ËâØÂ•ΩÁöÑËÅå‰∏öÂèëÂ±ïÊú∫‰ºö
            `,
            companyName: "ÂàõÊñ∞ÁßëÊäÄÊúâÈôêÂÖ¨Âè∏",
            positionTitle: "È´òÁ∫ßËΩØ‰ª∂Â∑•Á®ãÂ∏à",
            companyCulture: "Ê≥®ÈáçÂàõÊñ∞„ÄÅÂõ¢ÈòüÂêà‰Ωú„ÄÅÊåÅÁª≠Â≠¶‰π†"
        },
        expectedFields: ['success', 'coverLetter'],
        qualityCriteria: {
            hasCoverLetter: true,
            hasKeyHighlights: true,
            hasCustomizationNotes: true
        }
    },
    {
        name: "Â∫îÂ±äÁîüÊ±ÇËÅå‰ø°ÊµãËØï",
        input: {
            resumeText: `
ÊùéÂõõ
Â∫îÂ±äÊØï‰∏öÁîü
ÁîµËØù: 139-0000-0000 | ÈÇÆÁÆ±: lisi@email.com

ÊïôËÇ≤ËÉåÊôØ:
Ê∏ÖÂçéÂ§ßÂ≠¶ ËΩØ‰ª∂Â∑•Á®ã Êú¨Áßë 2020-2024

ÂÆû‰π†ÁªèÈ™å:
XYZÂÖ¨Âè∏ ËΩØ‰ª∂ÂºÄÂèëÂÆû‰π†Áîü (2023.06-2023.09)
- ÂèÇ‰∏éÁßªÂä®Â∫îÁî®ÂºÄÂèë
- Â≠¶‰π†‰ΩøÁî®FlutterÊ°ÜÊû∂
- ÂçèÂä©ÊµãËØïÂíåbug‰øÆÂ§ç

È°πÁõÆÁªèÈ™å:
Ê†°Âõ≠‰∫åÊâã‰∫§ÊòìÂπ≥Âè∞ (2023.03-2023.06)
- ‰ΩøÁî®Vue.jsÂíåNode.jsÂºÄÂèë
- ÂÆûÁé∞Áî®Êà∑Ê≥®ÂÜå„ÄÅÂïÜÂìÅÂèëÂ∏É„ÄÅËÅäÂ§©ÂäüËÉΩ
- Ëé∑ÂæóÈô¢Á∫ßÈ°πÁõÆÁ´ûËµõ‰∫åÁ≠âÂ•ñ

ÊäÄËÉΩ:
ÁºñÁ®ãËØ≠Ë®Ä: JavaScript, Python, Java
Ê°ÜÊû∂: Vue.js, Node.js, Flutter
Êï∞ÊçÆÂ∫ì: MySQL
Â∑•ÂÖ∑: Git, VS Code
            `,
            jobDescription: `
ÊãõËÅòÂâçÁ´ØÂºÄÂèëÂ∑•Á®ãÂ∏à

Êàë‰ª¨ÊòØ‰∏ÄÂÆ∂‰∏ìÊ≥®‰∫éÁî®Êà∑‰ΩìÈ™åÁöÑ‰∫íËÅîÁΩëÂÖ¨Âè∏ÔºåÊ≠£Âú®ÂØªÊâæÊúâÊΩúÂäõÁöÑÂâçÁ´ØÂºÄÂèëÂ∑•Á®ãÂ∏à„ÄÇ

Ë¶ÅÊ±Ç:
- ËÆ°ÁÆóÊú∫Áõ∏ÂÖ≥‰∏ì‰∏öÂ∫îÂ±äÊØï‰∏öÁîü
- ÁÜüÊÇâJavaScriptÂíå‰∏ªÊµÅÂâçÁ´ØÊ°ÜÊû∂
- ÊúâÈ°πÁõÆÂºÄÂèëÁªèÈ™å
- Â≠¶‰π†ËÉΩÂäõÂº∫ÔºåÊúâÂõ¢ÈòüÂêà‰ΩúÁ≤æÁ•û

‰ºòÂÖàËÄÉËôë:
- ÊúâÁßªÂä®Á´ØÂºÄÂèëÁªèÈ™å
- ÁÜüÊÇâVue.jsÊàñReact
- ÊúâÂÆûÈôÖÈ°πÁõÆÁªèÈ™å

Êàë‰ª¨Êèê‰æõ:
- ÂÆåÂñÑÁöÑÂüπËÆ≠‰ΩìÁ≥ª
- ÂØºÂ∏àÊåáÂØº
- ËâØÂ•ΩÁöÑÊàêÈïøÁéØÂ¢É
            `,
            companyName: "Áî®Êà∑‰ΩìÈ™åÁßëÊäÄÊúâÈôêÂÖ¨Âè∏",
            positionTitle: "ÂâçÁ´ØÂºÄÂèëÂ∑•Á®ãÂ∏à",
            companyCulture: "Ê≥®ÈáçÁî®Êà∑‰ΩìÈ™å„ÄÅÂàõÊñ∞ÊÄùÁª¥„ÄÅÂπ¥ËΩªÊ¥ªÂäõ"
        },
        expectedFields: ['success', 'coverLetter'],
        qualityCriteria: {
            hasCoverLetter: true,
            hasKeyHighlights: true,
            hasCustomizationNotes: true
        }
    }
];

// Ë¥®ÈáèËØÑ‰º∞ÂáΩÊï∞
function assessQuality(response, testCase) {
    let score = 0;
    const feedback = [];
    
    // Ê£ÄÊü•ÂìçÂ∫îÊ†ºÂºè
    if (!response.success || !response.coverLetter) {
        return { score: 0, feedback: ["ÂìçÂ∫îÊ†ºÂºèÈîôËØØÔºöÁº∫Â∞ësuccessÊàñcoverLetterÂ≠óÊÆµ"] };
    }
    
    const coverLetter = response.coverLetter;
    
    // 1. Ê£ÄÊü•ÂøÖÈúÄÂ≠óÊÆµÂÆåÊï¥ÊÄß (25ÂàÜ)
    const requiredFields = ['coverLetter', 'keyHighlights', 'customizationNotes'];
    
    let fieldScore = 0;
    requiredFields.forEach(field => {
        if (coverLetter[field] !== undefined) {
            fieldScore += 8;
        } else {
            feedback.push(`Áº∫Â∞ëÂøÖÈúÄÂ≠óÊÆµ: ${field}`);
        }
    });
    
    score += fieldScore;
    
    // 2. Ê£ÄÊü•Ê±ÇËÅå‰ø°ÂÜÖÂÆπË¥®Èáè (30ÂàÜ)
    if (coverLetter.coverLetter) {
        const letterText = coverLetter.coverLetter;
        
        // Ê£ÄÊü•ÈïøÂ∫¶
        if (letterText.length > 200) {
            score += 10;
        } else {
            feedback.push("Ê±ÇËÅå‰ø°ÂÜÖÂÆπËøáÁü≠");
        }
        
        // Ê£ÄÊü•ÊòØÂê¶ÂåÖÂê´ÂÖ¨Âè∏ÂêçÁß∞
        if (letterText.toLowerCase().includes(testCase.input.companyName.toLowerCase())) {
            score += 5;
        } else {
            feedback.push("Ê±ÇËÅå‰ø°‰∏≠Êú™ÊèêÂèäÂÖ¨Âè∏ÂêçÁß∞");
        }
        
        // Ê£ÄÊü•ÊòØÂê¶ÂåÖÂê´ËÅå‰ΩçÂêçÁß∞
        if (letterText.toLowerCase().includes(testCase.input.positionTitle.toLowerCase())) {
            score += 5;
        } else {
            feedback.push("Ê±ÇËÅå‰ø°‰∏≠Êú™ÊèêÂèäËÅå‰ΩçÂêçÁß∞");
        }
        
        // Ê£ÄÊü•ÊòØÂê¶ÂåÖÂê´ÁÆÄÂéÜ‰∏≠ÁöÑÂÖ≥ÈîÆ‰ø°ÊÅØ
        const resumeKeywords = ['java', 'javascript', 'python', 'spring', 'react', 'vue', 'mysql', 'ÁªèÈ™å'];
        let resumeRelevance = 0;
        
        resumeKeywords.forEach(keyword => {
            if (testCase.input.resumeText.toLowerCase().includes(keyword) && 
                letterText.toLowerCase().includes(keyword)) {
                resumeRelevance += 2;
            }
        });
        
        score += Math.min(resumeRelevance, 10);
        
        if (resumeRelevance < 4) {
            feedback.push("Ê±ÇËÅå‰ø°‰∏éÁÆÄÂéÜÂÜÖÂÆπÂÖ≥ËÅîÂ∫¶‰∏çË∂≥");
        }
    }
    
    // 3. Ê£ÄÊü•ÂÖ≥ÈîÆ‰∫ÆÁÇπ (20ÂàÜ)
    if (coverLetter.keyHighlights && Array.isArray(coverLetter.keyHighlights)) {
        if (coverLetter.keyHighlights.length > 0) {
            score += 20;
        } else {
            feedback.push("ÂÖ≥ÈîÆ‰∫ÆÁÇπÊï∞ÁªÑ‰∏∫Á©∫");
        }
    } else {
        feedback.push("keyHighlights‰∏çÊòØÊï∞ÁªÑÊ†ºÂºè");
    }
    
    // 4. Ê£ÄÊü•ÂÆöÂà∂ÂåñËØ¥Êòé (15ÂàÜ)
    if (coverLetter.customizationNotes) {
        const notesText = coverLetter.customizationNotes;
        
        if (notesText.length > 50) {
            score += 15;
        } else {
            feedback.push("ÂÆöÂà∂ÂåñËØ¥ÊòéÂÜÖÂÆπËøáÁü≠");
        }
    } else {
        feedback.push("Áº∫Â∞ëÂÆöÂà∂ÂåñËØ¥Êòé");
    }
    
    // 5. Ê£ÄÊü•‰∏éËÅå‰ΩçÊèèËø∞ÁöÑÁõ∏ÂÖ≥ÊÄß (10ÂàÜ)
    const jobDesc = testCase.input.jobDescription.toLowerCase();
    const letterText = JSON.stringify(coverLetter).toLowerCase();
    
    const jobKeywords = ['Ë¶ÅÊ±Ç', 'ÊäÄËÉΩ', 'ÁªèÈ™å', 'ÁÜüÊÇâ', 'ÊéåÊè°', '‰ºòÂÖà'];
    let jobRelevance = 0;
    
    jobKeywords.forEach(keyword => {
        if (jobDesc.includes(keyword) && letterText.includes(keyword)) {
            jobRelevance += 2;
        }
    });
    
    score += Math.min(jobRelevance, 10);
    
    if (jobRelevance < 4) {
        feedback.push("Ê±ÇËÅå‰ø°‰∏éËÅå‰ΩçË¶ÅÊ±ÇÁõ∏ÂÖ≥ÊÄß‰∏çË∂≥");
    }
    
    return { score, feedback };
}

// ËøêË°åÊµãËØï
async function runTest(testCase) {
    console.log(`\n=== ËøêË°åÊµãËØï: ${testCase.name} ===`);
    
    try {
        const response = await axios.post('/resume/cover-letter', testCase.input, CONFIG);
        
        console.log('‚úÖ API Ë∞ÉÁî®ÊàêÂäü');
        console.log('ÂìçÂ∫îÁä∂ÊÄÅ:', response.status);
        
        // Ë¥®ÈáèËØÑ‰º∞
        const quality = assessQuality(response.data, testCase);
        
        console.log('üìä Ë¥®ÈáèËØÑ‰º∞ÁªìÊûú:');
        console.log(`   ÊÄªÂàÜ: ${quality.score}/100`);
        console.log(`   Á≠âÁ∫ß: ${getGrade(quality.score)}`);
        
        if (quality.feedback.length > 0) {
            console.log('   ÂèçÈ¶à:');
            quality.feedback.forEach(fb => console.log(`   - ${fb}`));
        }
        
        return {
            testCase: testCase.name,
            success: true,
            score: quality.score,
            grade: getGrade(quality.score),
            feedback: quality.feedback
        };
        
    } catch (error) {
        console.log('‚ùå ÊµãËØïÂ§±Ë¥•:', error.message);
        return {
            testCase: testCase.name,
            success: false,
            error: error.message
        };
    }
}

// Ëé∑ÂèñÁ≠âÁ∫ß
function getGrade(score) {
    if (score >= 90) return '‰ºòÁßÄ';
    if (score >= 80) return 'ËâØÂ•Ω';
    if (score >= 70) return '‰∏ÄËà¨';
    if (score >= 60) return 'ËæÉÂ∑Æ';
    return 'Â§±Ë¥•';
}

// ‰∏ªÂáΩÊï∞
async function main() {
    console.log('üöÄ ÂºÄÂßãÊ±ÇËÅå‰ø°ÁîüÊàêË¥®ÈáèÊµãËØï');
    console.log('=' * 50);
    
    const results = [];
    
    for (const testCase of TEST_CASES) {
        const result = await runTest(testCase);
        results.push(result);
    }
    
    // ÁîüÊàêÊµãËØïÊä•Âëä
    console.log('\nüìã ÊµãËØïÊä•Âëä');
    console.log('=' * 50);
    
    const successfulTests = results.filter(r => r.success);
    const averageScore = successfulTests.length > 0 
        ? successfulTests.reduce((sum, r) => sum + r.score, 0) / successfulTests.length 
        : 0;
    
    console.log(`ÊÄªÊµãËØïÊï∞: ${results.length}`);
    console.log(`ÊàêÂäüÊµãËØïÊï∞: ${successfulTests.length}`);
    console.log(`Âπ≥ÂùáÂàÜÊï∞: ${averageScore.toFixed(1)}/100`);
    
    results.forEach(result => {
        const status = result.success ? '‚úÖ' : '‚ùå';
        const score = result.success ? ` (${result.score}/100 - ${result.grade})` : '';
        console.log(`${status} ${result.testCase}${score}`);
    });
    
    // ‰øùÂ≠òÁªìÊûúÂà∞Êñá‰ª∂
    const fs = require('fs');
    const report = {
        timestamp: new Date().toISOString(),
        testType: 'cover_letter',
        results,
        summary: {
            totalTests: results.length,
            successfulTests: successfulTests.length,
            averageScore: averageScore.toFixed(1)
        }
    };
    
    // Á°Æ‰øùresultsÁõÆÂΩïÂ≠òÂú®
    if (!fs.existsSync('benchmark/results')) {
        fs.mkdirSync('benchmark/results', { recursive: true });
    }
    
    fs.writeFileSync(
        `benchmark/results/cover_letter_${Date.now()}.json`,
        JSON.stringify(report, null, 2)
    );
    
    console.log('\nüíæ ÊµãËØïÁªìÊûúÂ∑≤‰øùÂ≠òÂà∞ benchmark/results/ ÁõÆÂΩï');
}

// ËøêË°åÊµãËØï
if (require.main === module) {
    main().catch(console.error);
}

module.exports = { runTest, assessQuality, TEST_CASES }; 