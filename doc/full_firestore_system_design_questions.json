[
  {
    "id": "SD006",
    "category": "大模型推理",
    "title": "设计一个支持高QPS的LLM推理平台",
    "difficulty": "困难",
    "description": "构建一个支持高并发、低延迟、可监控的LLM API服务平台。",
    "design_steps": [
      "用户请求进入Gateway，完成鉴权与限流。",
      "根据请求内容选择模型版本，并路由至对应GPU推理服务。",
      "对热请求结果进行缓存（如基于Redis或Vector DB）。",
      "通过Prometheus和Grafana进行实时监控。",
      "结合Kubernetes进行服务伸缩与异常恢复。",
      "记录API使用日志用于计费和安全审计。"
    ],
    "answer": "1. 用户请求进入Gateway，完成鉴权与限流。\n2. 根据请求内容选择模型版本，并路由至对应GPU推理服务。\n3. 对热请求结果进行缓存（如基于Redis或Vector DB）。\n4. 通过Prometheus和Grafana进行实时监控。\n5. 结合Kubernetes进行服务伸缩与异常恢复。\n6. 记录API使用日志用于计费和安全审计。",
    "tags": [
      "LLM",
      "GPU推理",
      "负载均衡",
      "限流",
      "A/B测试"
    ],
    "reference": "扩展题目：大模型推理",
    "createdAt": "2025-07-04T16:32:31.779008",
    "updatedAt": "2025-07-04T16:32:31.779016"
  },
  {
    "id": "SD007",
    "category": "多模态",
    "title": "构建一个图文检索系统（多模态向量检索）",
    "difficulty": "中等",
    "description": "设计一个支持文本检索图像的多模态搜索平台。",
    "design_steps": [
      "文本/图像输入统一通过CLIP或BLIP模型生成Embedding。",
      "将Embedding存入FAISS/HNSWLib建立近邻索引。",
      "支持按相似度排序的多模态融合检索策略。",
      "使用增量向量更新机制实现向量库动态更新。",
      "提供图像质量筛选与排序（如视觉清晰度打分）。"
    ],
    "answer": "1. 文本/图像输入统一通过CLIP或BLIP模型生成Embedding。\n2. 将Embedding存入FAISS/HNSWLib建立近邻索引。\n3. 支持按相似度排序的多模态融合检索策略。\n4. 使用增量向量更新机制实现向量库动态更新。\n5. 提供图像质量筛选与排序（如视觉清晰度打分）。",
    "tags": [
      "多模态",
      "CLIP",
      "向量检索",
      "图文检索"
    ],
    "reference": "扩展题目：多模态检索",
    "createdAt": "2025-07-04T16:32:31.779026",
    "updatedAt": "2025-07-04T16:32:31.779028"
  },
  {
    "id": "SD009",
    "category": "AI Agent",
    "title": "构建一个能完成任务规划的AI Agent平台",
    "difficulty": "困难",
    "description": "支持子任务分解、工具调用、记忆机制的智能Agent系统。",
    "design_steps": [
      "使用LLM生成任务规划并拆解为子任务链。",
      "构建状态机执行流程：感知 → 推理 → 执行。",
      "支持插件式工具调用机制，自动适配API调用格式。",
      "引入短期记忆（对话上下文）与长期记忆（向量数据库）。",
      "增加故障恢复机制，Agent在出错后能自动重试或修正路径。"
    ],
    "answer": "1. 使用LLM生成任务规划并拆解为子任务链。\n2. 构建状态机执行流程：感知 → 推理 → 执行。\n3. 支持插件式工具调用机制，自动适配API调用格式。\n4. 引入短期记忆（对话上下文）与长期记忆（向量数据库）。\n5. 增加故障恢复机制，Agent在出错后能自动重试或修正路径。",
    "tags": [
      "AI Agent",
      "任务规划",
      "LangChain",
      "工具调用"
    ],
    "reference": "扩展题目：AI智能体平台",
    "createdAt": "2025-07-04T16:32:31.779037",
    "updatedAt": "2025-07-04T16:32:31.779040"
  },
  {
    "id": "SD001",
    "category": "推荐系统",
    "title": "设计一个短视频推荐系统",
    "difficulty": "中等",
    "description": "设计视频处理、用户画像、实时推荐、冷启动策略。",
    "design_steps": [
      "定义系统目标：提升用户粘性，增加CTR。",
      "系统组件：视频处理、用户画像、推荐引擎、在线服务。",
      "数据流设计：Kafka/Flume → 特征服务 → 模型预测。",
      "推荐算法：协同过滤 + 内容理解 + 深度排序模型。",
      "冷启动解决方案：用户注册问卷、热门内容打底。",
      "性能指标：P99延迟<200ms，推荐点击率>10%。"
    ],
    "answer": "1. 定义系统目标：提升用户粘性，增加CTR。\n2. 系统组件：视频处理、用户画像、推荐引擎、在线服务。\n3. 数据流设计：Kafka/Flume → 特征服务 → 模型预测。\n4. 推荐算法：协同过滤 + 内容理解 + 深度排序模型。\n5. 冷启动解决方案：用户注册问卷、热门内容打底。\n6. 性能指标：P99延迟<200ms，推荐点击率>10%。",
    "tags": [
      "推荐系统",
      "短视频",
      "冷启动",
      "深度学习"
    ],
    "reference": "Chapter 23.8",
    "createdAt": "2025-07-04T16:32:31.779047",
    "updatedAt": "2025-07-04T16:32:31.779049"
  },
  {
    "id": "SD002",
    "category": "推荐系统",
    "title": "设计一个电商推荐系统",
    "difficulty": "中等",
    "description": "构建一个混合推荐系统，结合协同过滤与内容推荐算法。",
    "design_steps": [
      "需求分析：商品曝光率、转化率、用户满意度。",
      "召回策略：UserCF、ItemCF、基于标签与Embedding。",
      "排序模型：Wide & Deep + XGBoost。",
      "数据流：点击日志、商品画像、用户偏好实时更新。",
      "冷启动：用户问卷 + 热门推荐。",
      "评估指标：AUC、GMV提升、点击率CTR。"
    ],
    "answer": "1. 需求分析：商品曝光率、转化率、用户满意度。\n2. 召回策略：UserCF、ItemCF、基于标签与Embedding。\n3. 排序模型：Wide & Deep + XGBoost。\n4. 数据流：点击日志、商品画像、用户偏好实时更新。\n5. 冷启动：用户问卷 + 热门推荐。\n6. 评估指标：AUC、GMV提升、点击率CTR。",
    "tags": [
      "推荐系统",
      "电商",
      "排序模型",
      "冷启动"
    ],
    "reference": "扩展设计案例",
    "createdAt": "2025-07-04T16:32:31.779054",
    "updatedAt": "2025-07-04T16:32:31.779055"
  },
  {
    "id": "SD003",
    "category": "图像生成",
    "title": "构建一个Text-to-Image生成系统",
    "difficulty": "困难",
    "description": "设计一个像 DALL·E 的生成式AI平台，支持文本生成图像。",
    "design_steps": [
      "使用Stable Diffusion或DALL·E架构设计模型。",
      "数据管道设计：文本-图像对采集、清洗、预处理。",
      "模型训练：多阶段训练 + fine-tuning。",
      "推理部署：GPU集群、多租户调度。",
      "安全性：过滤不当内容，prompt校验。",
      "输出优化：CLIP打分排序，提高输出质量。"
    ],
    "answer": "1. 使用Stable Diffusion或DALL·E架构设计模型。\n2. 数据管道设计：文本-图像对采集、清洗、预处理。\n3. 模型训练：多阶段训练 + fine-tuning。\n4. 推理部署：GPU集群、多租户调度。\n5. 安全性：过滤不当内容，prompt校验。\n6. 输出优化：CLIP打分排序，提高输出质量。",
    "tags": [
      "图像生成",
      "Diffusion",
      "生成式AI",
      "CLIP"
    ],
    "reference": "Chapter 24.2",
    "createdAt": "2025-07-04T16:32:31.779061",
    "updatedAt": "2025-07-04T16:32:31.779062"
  },
  {
    "id": "SD004",
    "category": "大语言模型",
    "title": "构建一个类ChatGPT的大语言模型系统",
    "difficulty": "困难",
    "description": "构建一个能理解与生成自然语言的AI对话系统。",
    "design_steps": [
      "模型架构：使用Transformer、Decoder-only结构。",
      "预训练：大规模语料构建和多阶段训练。",
      "微调：Instruction Tuning、RLHF。",
      "部署：模型压缩（INT8）、GPU/TPU部署、弹性负载均衡。",
      "反馈机制：收集用户反馈 + 自动标注优化。",
      "评估指标：Perplexity、人类评分、一致性。"
    ],
    "answer": "1. 模型架构：使用Transformer、Decoder-only结构。\n2. 预训练：大规模语料构建和多阶段训练。\n3. 微调：Instruction Tuning、RLHF。\n4. 部署：模型压缩（INT8）、GPU/TPU部署、弹性负载均衡。\n5. 反馈机制：收集用户反馈 + 自动标注优化。\n6. 评估指标：Perplexity、人类评分、一致性。",
    "tags": [
      "LLM",
      "ChatGPT",
      "Transformer",
      "微调"
    ],
    "reference": "Chapter 24.3",
    "createdAt": "2025-07-04T16:32:31.779067",
    "updatedAt": "2025-07-04T16:32:31.779069"
  },
  {
    "id": "SD005",
    "category": "自动驾驶",
    "title": "设计一个自动驾驶感知与控制系统",
    "difficulty": "困难",
    "description": "从传感器感知、决策规划到控制执行，完整设计自动驾驶系统架构。",
    "design_steps": [
      "感知模块：激光雷达、摄像头、雷达融合。",
      "决策模块：规则引擎 + 强化学习辅助。",
      "路径规划：局部路径 + 全局导航。",
      "控制执行：低延迟CAN控制 + 冗余机制。",
      "仿真测试：CARLA 或 Apollo 等仿真平台。",
      "安全机制：Fail-safe冗余、异常检测、OTA升级。"
    ],
    "answer": "1. 感知模块：激光雷达、摄像头、雷达融合。\n2. 决策模块：规则引擎 + 强化学习辅助。\n3. 路径规划：局部路径 + 全局导航。\n4. 控制执行：低延迟CAN控制 + 冗余机制。\n5. 仿真测试：CARLA 或 Apollo 等仿真平台。\n6. 安全机制：Fail-safe冗余、异常检测、OTA升级。",
    "tags": [
      "自动驾驶",
      "传感器融合",
      "路径规划",
      "控制系统"
    ],
    "reference": "扩展设计场景",
    "createdAt": "2025-07-04T16:32:31.779074",
    "updatedAt": "2025-07-04T16:32:31.779076"
  },
  {
    "id": "SD006",
    "category": "自动驾驶",
    "title": "构建自动驾驶云端仿真训练与回放平台",
    "difficulty": "中等",
    "description": "海量数据存储、索引回放、模型更新",
    "design_steps": [
      "构建高效的视频与传感器数据采集系统。",
      "设计可搜索的索引回放平台，支持标签化检索。",
      "支持自动化模型回放训练与性能对比。",
      "设计云端存储压缩与冷热分层结构。",
      "提供可视化的调试与异常行为回放工具。"
    ],
    "answer": "1. 构建高效的视频与传感器数据采集系统。\n2. 设计可搜索的索引回放平台，支持标签化检索。\n3. 支持自动化模型回放训练与性能对比。\n4. 设计云端存储压缩与冷热分层结构。\n5. 提供可视化的调试与异常行为回放工具。",
    "tags": [
      "自动驾驶",
      "仿真平台",
      "数据回放",
      "模型训练"
    ],
    "reference": "自动驾驶系统扩展题目",
    "createdAt": "2025-07-04T16:32:31.779081",
    "updatedAt": "2025-07-04T16:32:31.779082"
  },
  {
    "id": "SD007",
    "category": "强化学习代理",
    "title": "构建一个用于机器人导航的AI智能体平台",
    "difficulty": "困难",
    "description": "状态空间设计、策略更新、奖励机制",
    "design_steps": [
      "定义状态空间、动作空间与奖励函数。",
      "构建仿真环境（如OpenAI Gym + Gazebo）。",
      "使用DQN、PPO等算法训练导航策略。",
      "引入Curriculum Learning逐步提升难度。",
      "部署到真实机器人平台并加入在线微调机制。"
    ],
    "answer": "1. 定义状态空间、动作空间与奖励函数。\n2. 构建仿真环境（如OpenAI Gym + Gazebo）。\n3. 使用DQN、PPO等算法训练导航策略。\n4. 引入Curriculum Learning逐步提升难度。\n5. 部署到真实机器人平台并加入在线微调机制。",
    "tags": [
      "强化学习",
      "导航",
      "智能体",
      "机器人"
    ],
    "reference": "强化学习智能体平台",
    "createdAt": "2025-07-04T16:32:31.779087",
    "updatedAt": "2025-07-04T16:32:31.779088"
  },
  {
    "id": "SD008",
    "category": "机器学习",
    "title": "设计一个可扩展的ML模型训练与部署系统",
    "difficulty": "中等",
    "description": "数据管道、特征工程、训练调度、在线预测",
    "design_steps": [
      "构建数据清洗与特征处理流水线（支持Airflow调度）。",
      "采用分布式训练框架（如Horovod、TFX Pipeline）。",
      "模型版本控制与评估自动化。",
      "使用KServe等进行模型在线部署。",
      "监控模型性能与漂移情况，自动触发再训练。"
    ],
    "answer": "1. 构建数据清洗与特征处理流水线（支持Airflow调度）。\n2. 采用分布式训练框架（如Horovod、TFX Pipeline）。\n3. 模型版本控制与评估自动化。\n4. 使用KServe等进行模型在线部署。\n5. 监控模型性能与漂移情况，自动触发再训练。",
    "tags": [
      "机器学习",
      "模型部署",
      "训练调度",
      "自动化ML"
    ],
    "reference": "ML系统设计",
    "createdAt": "2025-07-04T16:32:31.779094",
    "updatedAt": "2025-07-04T16:32:31.779095"
  },
  {
    "id": "SD009",
    "category": "系统设计理论",
    "title": "URL Shortener系统设计",
    "difficulty": "入门",
    "description": "高并发写入、短链生成、碰撞处理",
    "design_steps": [
      "前端输入长链接 → API接口接收。",
      "生成唯一短链（如Base62 + 时间戳 + 随机种子）。",
      "短链 → 长链映射存入数据库（如Redis + MySQL）。",
      "考虑并发下的唯一性与碰撞检测。",
      "加入访问计数、过期机制、访问权限控制等增强功能。"
    ],
    "answer": "1. 前端输入长链接 → API接口接收。\n2. 生成唯一短链（如Base62 + 时间戳 + 随机种子）。\n3. 短链 → 长链映射存入数据库（如Redis + MySQL）。\n4. 考虑并发下的唯一性与碰撞检测。\n5. 加入访问计数、过期机制、访问权限控制等增强功能。",
    "tags": [
      "系统设计",
      "短链接",
      "高并发",
      "哈希"
    ],
    "reference": "Chapter 21 URL Shortener",
    "createdAt": "2025-07-04T16:32:31.779100",
    "updatedAt": "2025-07-04T16:32:31.779101"
  },
  {
    "id": "SD010",
    "category": "系统设计理论",
    "title": "Autocomplete系统设计",
    "difficulty": "入门",
    "description": "Trie结构、查询优化、前缀缓存",
    "design_steps": [
      "用户输入字符流，系统提供前缀建议。",
      "构建Trie树索引词典支持前缀搜索。",
      "常用词优先排序（TF-IDF + 用户偏好）。",
      "添加缓存层提升热门词响应速度。",
      "考虑多语言支持与拼写纠错机制。"
    ],
    "answer": "1. 用户输入字符流，系统提供前缀建议。\n2. 构建Trie树索引词典支持前缀搜索。\n3. 常用词优先排序（TF-IDF + 用户偏好）。\n4. 添加缓存层提升热门词响应速度。\n5. 考虑多语言支持与拼写纠错机制。",
    "tags": [
      "系统设计",
      "自动补全",
      "Trie",
      "前缀树"
    ],
    "reference": "Chapter 21 Autocomplete",
    "createdAt": "2025-07-04T16:32:31.779106",
    "updatedAt": "2025-07-04T16:32:31.779107"
  },
  {
    "id": "SD011",
    "category": "大模型推理",
    "title": "设计一个能处理千万QPS的文生图在线推理系统",
    "difficulty": "困难",
    "description": "包括GPU调度、模型压缩、多租户隔离",
    "design_steps": [
      "模型架构采用Diffusion + Text Encoder。",
      "使用ONNX + TensorRT进行模型压缩与加速。",
      "多GPU部署并使用请求队列调度。",
      "租户隔离：API Key配额 + 多模型路由。",
      "结果缓存与CDN部署降低二次延迟。"
    ],
    "answer": "1. 模型架构采用Diffusion + Text Encoder。\n2. 使用ONNX + TensorRT进行模型压缩与加速。\n3. 多GPU部署并使用请求队列调度。\n4. 租户隔离：API Key配额 + 多模型路由。\n5. 结果缓存与CDN部署降低二次延迟。",
    "tags": [
      "LLM",
      "多租户",
      "推理平台",
      "Diffusion"
    ],
    "reference": "大模型推理平台",
    "createdAt": "2025-07-04T16:32:31.779112",
    "updatedAt": "2025-07-04T16:32:31.779113"
  },
  {
    "id": "SD012",
    "category": "搜索系统",
    "title": "设计一个文档搜索与排名系统（如 Google）",
    "difficulty": "困难",
    "description": "索引建立、PageRank、点击反馈排名",
    "design_steps": [
      "解析网页内容并构建倒排索引结构。",
      "使用PageRank算法构建基础初始排序。",
      "融合用户点击行为与个性化特征优化搜索排序。",
      "支持分页、纠错、语义扩展查询。",
      "监控搜索质量与时效性，支持搜索推荐与热点发现。"
    ],
    "answer": "1. 解析网页内容并构建倒排索引结构。\n2. 使用PageRank算法构建基础初始排序。\n3. 融合用户点击行为与个性化特征优化搜索排序。\n4. 支持分页、纠错、语义扩展查询。\n5. 监控搜索质量与时效性，支持搜索推荐与热点发现。",
    "tags": [
      "搜索系统",
      "排序算法",
      "倒排索引",
      "PageRank"
    ],
    "reference": "Chapter 23 搜索系统设计",
    "createdAt": "2025-07-04T16:32:31.779118",
    "updatedAt": "2025-07-04T16:32:31.779119"
  }
]